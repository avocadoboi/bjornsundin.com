var Physical={};Physical.Vector=class{constructor(c,d){"undefined"!=typeof d&&"undefined"!=typeof c?(this.x=c,this.y=d):"undefined"==typeof c?(this.x=0,this.y=0):(this.x=c.x,this.y=c.y)}set(c,d){2==arguments.length?(this.x=c,this.y=d):(this.x=c.x,this.y=c.y)}add(c,d){2==arguments.length?(this.x+=c,this.y+=d):(this.x+=c.x,this.y+=c.y)}subtract(c,d){2==arguments.length?(this.x-=c,this.y-=d):(this.x-=c.x,this.y-=c.y)}multiply(c){this.x*=c,this.y*=c}normalize(){var c=this.getLength();this.x/=c,this.y/=c}rotate(c,d){"undefined"==typeof d?this.set(this.x*Math.cos(c)-this.y*Math.sin(c),this.x*Math.sin(c)+this.y*Math.cos(c)):this.set((this.x-d.x)*Math.cos(c)-(this.y-d.y)*Math.sin(c)+d.x,(this.y-d.y)*Math.cos(c)+(this.x-d.x)*Math.sin(c)+d.y)}setRotation(c,d){var e;e="undefined"==typeof d?Math.atan2(this.y,this.x):Math.atan2(this.y-d.y,this.x-d.x),this.rotate(c-e,d)}getLengthSquared(){return this.x*this.x+this.y*this.y}getLength(){return Math.sqrt(this.x*this.x+this.y*this.y)}getNormalized(){var c=this.getLength();return new Physical.Vector(this.x/c,this.y/c)}getMultiplied(c){return new Physical.Vector(this.x*c,this.y*c)}getDivided(c){return new Physical.Vector(this.x/c,this.y/c)}getSubtracted(c){return new Physical.Vector(this.x-c.x,this.y-c.y)}getAdded(c){return new Physical.Vector(this.x+c.x,this.y+c.y)}equals(c){return c.x==this.x&&c.y==this.y}static getDot(c,d){return c.x*d.x+c.y*d.y}static getCross(c,d){return c.x*d.y-d.x*c.y}static getDistance(c,d){return new Physical.Vector(c.x-d.x,c.y-d.y).getLength()}static getDistanceSquared(c,d){return new Physical.Vector(c.x-d.x,c.y-d.y).getLengthSquared()}},Physical.World=class{constructor(){this.bodies=[],this.gravity=new Physical.Vector,this.updatesPerSecond=60,this.pixelsPerMeter=120,this.numberOfIterations=5}addBody(c){c.world=this,c.position_meters.set(c.position.getDivided(this.pixelsPerMeter)),"Rectangle"==c.type?c.size_meters=c.size.getDivided(this.pixelsPerMeter):"Circle"==c.type&&(c.radius_meters=c.radius/this.pixelsPerMeter),this.bodies.push(c)}removeBody(c){"number"==typeof c?this.bodies.splice(c,1):this.bodies.splice(this.bodies.indexOf(c),1)}update(){for(var c=0;c<this.bodies.length;c++)if(!this.bodies[c].isStatic){var d=this.bodies[c];d.updateArea(),d.applyForce(this.gravity.getMultiplied(d.getMass())),d.position_meters.add(d.velocity_metersPerSecond.getDivided(this.updatesPerSecond)),d.rotation+=d.angularVelocity/this.updatesPerSecond}for(var f,g,e=[],c=0;c<this.bodies.length;c++)for(var i=c+1;i<this.bodies.length;i++)this.bodies[c].isStatic&&this.bodies[i].isStatic||(f=this.bodies[c].getBounds(),g=this.bodies[i].getBounds(),g.right>f.left&&g.left<f.right&&g.bottom>f.top&&g.top<f.bottom&&e.push(this.bodies[c],this.bodies[i]));for(var c=0;c<this.numberOfIterations;c++)for(var i=0;i<e.length-1;i+=2)Physical.Bodies.Body.updateCollision(e[i],e[i+1]);for(var c=0;c<this.bodies.length;c++)this.bodies[c].position.set(this.bodies[c].position_meters.getMultiplied(this.pixelsPerMeter))}},Physical.Bodies={},Physical.Bodies.Body=class{constructor(){this.type="Body",this.world=null,this.position_meters=new Physical.Vector,this.position=new Physical.Vector,this.velocity_metersPerSecond=new Physical.Vector,this.area_squareMeters=0,this.density_kilosPerSquareMeter=1,this.staticFriction=0.1,this.dynamicFriction=0.1,this.restitution=0.2,this.isStatic=!1}applyForce(c,d){this.isStatic||(1==arguments.length?this.velocity_metersPerSecond.add(c.getDivided(this.getMass()*this.world.updatesPerSecond)):this.velocity_metersPerSecond.add(new Physical.Vector(c,d).getDivided(this.getMass()*this.world.updatesPerSecond)))}getMass(){return this.area_squareMeters*this.density_kilosPerSquareMeter}getBounds(){var c=this.getBounds_meters();return{left:c.left*this.world.pixelsPerMeter,right:c.right*this.world.pixelsPerMeter,top:c.top*this.world.pixelsPerMeter,bottom:c.bottom*this.world.pixelsPerMeter}}static updateCollision(c,d){if(!(c.isStatic&&d.isStatic)){var e,f;if("Rectangle"==c.type)if("Rectangle"==d.type){var g=new Physical.Vector(c.position_meters.x-d.position_meters.x,c.position_meters.y-d.position_meters.y),i=new Physical.Vector(c.size_meters.x/2+d.size_meters.x/2-Math.abs(g.x),c.size_meters.y/2+d.size_meters.y/2-Math.abs(g.y));if(0<i.x&&0<i.y)i.x<i.y?(e=i.x,f=new Physical.Vector(Math.sign(g.x),0)):(e=i.y,f=new Physical.Vector(0,0==Math.sign(g.y)?1:Math.sign(g.y)));else return}else if("Circle"==d.type)return void this.updateCollision(d,c);if("Circle"==c.type)if("Circle"==d.type){var g=new Physical.Vector(c.position_meters.x-d.position_meters.x,c.position_meters.y-d.position_meters.y);if(e=(c.radius_meters+d.radius_meters)*(c.radius_meters+d.radius_meters)-g.getLengthSquared(),0<e){var j=g.getLength();f=0==j?new Physical.Vector(1,0):g.getDivided(j),e=c.radius_meters+d.radius_meters-j}else return}else if("Rectangle"==d.type){var g=new Physical.Vector(c.position_meters.x-d.position_meters.x,c.position_meters.y-d.position_meters.y),k=new Physical.Vector(Math.max(d.position_meters.x-d.size_meters.x/2,Math.min(d.position_meters.x+d.size_meters.x/2,c.position_meters.x)),Math.max(d.position_meters.y-d.size_meters.y/2,Math.min(d.position_meters.y+d.size_meters.y/2,c.position_meters.y))),l=c.position_meters.getSubtracted(k);if(k.equals(c.position_meters))d.size_meters.x/2-Math.abs(g.x)<d.size_meters.y/2-Math.abs(g.y)?0<g.x?(f=new Physical.Vector(1,0),e=d.position_meters.x+d.size_meters.x/2-c.position_meters.x+c.radius_meters):(f=new Physical.Vector(-1,0),e=Math.abs(d.position_meters.x-d.size_meters.x/2-c.position_meters.x-c.radius_meters)):0<g.y?(f=new Physical.Vector(0,1),e=d.position_meters.y+d.size_meters.y/2-c.position_meters.y+c.radius_meters):(f=new Physical.Vector(0,-1),e=Math.abs(d.position_meters.y-d.size_meters.y/2-c.position_meters.y-c.radius_meters));else if(l.getLengthSquared()<c.radius_meters*c.radius_meters){var j=l.getLength();f=l.getDivided(j),e=c.radius_meters-j}else return}var m=c.isStatic?0:1/(c.area_squareMeters*c.density_kilosPerSquareMeter),n=d.isStatic?0:1/(d.area_squareMeters*d.density_kilosPerSquareMeter),p=f.getMultiplied(-e*1/(m+n));c.isStatic||c.position_meters.add(p.getMultiplied(-m)),d.isStatic||d.position_meters.add(p.getMultiplied(n));var q=Physical.Vector.getDot(c.velocity_metersPerSecond.getSubtracted(d.velocity_metersPerSecond),f);if(!(0<q)){var r;r=f.getMultiplied(((c.restitution+d.restitution)/2+1)*q/(m+n)),c.velocity_metersPerSecond.add(r.getMultiplied(-m)),d.velocity_metersPerSecond.add(r.getMultiplied(n));var u,s=c.velocity_metersPerSecond.getSubtracted(d.velocity_metersPerSecond),t=Physical.Vector.getCross(f,s);if(0>t)u=new Physical.Vector(-f.y,f.x);else if(0<t)u=new Physical.Vector(f.y,-f.x);else return;var v=Physical.Vector.getDot(s,u);r=Math.abs(v)<=Math.min(c.staticFriction/m,d.staticFriction/n)?u.getMultiplied(v):u.getMultiplied(v*Math.min(c.dynamicFriction,d.dynamicFriction)),c.applyForce(r.getMultiplied(-1)),d.applyForce(r)}}}},Physical.Bodies.Rectangle=class extends Physical.Bodies.Body{constructor(c,d,e,f){super(),this.type="Rectangle",this.position.set(c,d),this.size=new Physical.Vector(e,f)}updateArea(){this.area_squareMeters=this.size_meters.x*this.size_meters.y}getBounds_meters(){return{left:this.position_meters.x-this.size_meters.x/2,right:this.position_meters.x+this.size_meters.x/2,top:this.position_meters.y-this.size_meters.y/2,bottom:this.position_meters.y+this.size_meters.y/2}}},Physical.Bodies.Circle=class extends Physical.Bodies.Body{constructor(c,d,e){super(),this.type="Circle",this.position.set(c,d),this.radius=e}updateArea(){this.area_squareMeters=this.radius_meters*this.radius_meters*Math.PI}getBounds_meters(){return{left:this.position_meters.x-this.radius,right:this.position_meters.x+this.radius,top:this.position_meters.y-this.radius,bottom:this.position_meters.y+this.radius}}};